const line = require('@line/bot-sdk');
const { supabase } = require('../utils/supabaseClient');

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Client
const client = new line.Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
});

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
const handlePublicWorkshopRegister = async (req, res) => {
  const { first_name, last_name, phone_number, ref_code, serial_key } = req.body;

  // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input ‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
  if (!first_name || !last_name || !phone_number || !ref_code || !serial_key) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // üîç Logic 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ref + Serial Key ‡∏ï‡∏£‡∏á‡πÉ‡∏ô auth_sessions
  const { data: sessionData, error: sessionError } = await supabase
    .from('auth_sessions')
    .select('line_user_id')
    .eq('ref_code', ref_code)
    .eq('serial_key', serial_key)
    .maybeSingle();

  if (sessionError || !sessionData) {
    return res.status(403).json({ error: 'Ref.Code or Serial Key not found' });
  }

  const line_user_id = sessionData.line_user_id;

  // üìù Logic 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï source ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await supabase
    .from('auth_sessions')
    .update({
      source: 'attendees',
      first_name,
      last_name,
      phone_number
    })
    .eq('ref_code', ref_code);

  await supabase
    .from('adt_workshop_attendees')
    .insert({
      ref_code,
      first_name,
      last_name,
      phone_number,
      line_user_id,
      student_status: 'attendees'
    });

  // üì§ Flex Message
  const flexMsg = {
    type: 'flex',
    altText: '‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ADT Workshop',
    contents: {
      type: 'bubble',
      hero: {
        type: 'image',
        url: 'https://wpxpukbvynxawfxcdroj.supabase.co/storage/v1/object/public/adtliveworkshop/Live01.jpg',
        size: 'full',
        aspectRatio: '16:9',
        aspectMode: 'cover'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
            weight: 'bold',
            size: 'lg',
            color: '#00AA00'
          },
          {
            type: 'text',
            text: '‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            size: 'sm',
            wrap: true
          }
        ]
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            style: 'primary',
            color: '#1DB446',
            action: {
              type: 'uri',
              label: 'üì• ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
              uri: 'https://line.me/R/ti/g/xJ_XARnCVZ'
            }
          }
        ]
      }
    }
  };

  try {
    await client.pushMessage(line_user_id, flexMsg);
    await client.pushMessage(line_user_id, {
      type: 'text',
      text: 'üìå ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß ‡∏≠.‡πÄ‡∏Å‡πà‡∏á ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 24 ‡∏û.‡∏Ñ. 2568 ‡πÄ‡∏ß‡∏•‡∏≤ 19:00 ‡∏ô. ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö üïñ'
    });
  } catch (err) {
    console.error('‚ùå Failed to send LINE Flex:', err.message);
    return res.status(200).json({ message: 'Registered, but failed to send LINE message.' });
  }

  return res.status(200).json({ message: 'Registration completed and Flex sent.' });
};

module.exports = { handlePublicWorkshopRegister };
