const { supabase } = require('../../utils/supabaseClient');
const line = require('@line/bot-sdk');

// LINE CONFIG
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

// üìå Logic 2: Message Event Handler
const handleMessageEvent = async (event) => {
  try {
    const userId = event.source.userId;
    const msg = event.message;
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text message
    if (msg.type !== 'text') {
      return;
    }
    
    const text = msg.text.trim().toLowerCase();
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á req_refcode
    if (text === 'req_refcode' || text.includes('req_refcode') || text === 'req refcode') {
      
      // ‡∏î‡∏∂‡∏á ref_code ‡∏à‡∏≤‡∏Å database
      const { data, error } = await supabase
        .from('auth_sessions')
        .select('ref_code, status, expires_at')
        .eq('line_user_id', userId)
        .maybeSingle();
      
      if (error) {
        await client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        });
        return;
      }
      
      if (data && data.ref_code) {
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ref_code
        await client.replyMessage(event.replyToken, {
          type: 'text',
          text: `üîê ‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "${data.ref_code}"`
        });
      } else {
        // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ref_code
        await client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
        });
      }
    } else {
      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ - ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏≠‡∏∞‡πÑ‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Admin ‡∏ï‡∏≠‡∏ö‡πÄ‡∏≠‡∏á
      return;
    }
    
  } catch (error) {
    console.error('Message Handler Error:', error.message);
    
    try {
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    } catch (replyError) {
      console.error('Reply Error:', replyError.message);
    }
  }
};

module.exports = {
  handleMessageEvent
};
