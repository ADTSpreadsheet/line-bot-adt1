const { supabase } = require('../../utils/supabaseClient');

async function loginStarter(username, password, res) {
  try {
    console.log('üöÄ [loginStarter] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Login');
    console.log('üë§ username:', username);
    console.log('üîë password:', password);

    const { data: user, error } = await supabase
      .from('starter_plan_users')
      .select('*')
      .eq('username', username)
      .eq('password', password)
      .single();

    if (error || !user) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return res.status(401).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
      });
    }

    if (user.ref_code_status !== 'valid') {
      console.warn('‚õîÔ∏è ‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏£‡∏∞‡∏á‡∏±‡∏ö:', user.ref_code_status);
      return res.status(403).json({
        success: false,
        message: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ',
      });
    }

    const now = new Date();
    const nowISO = now.toISOString();

    // üëâ ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏´‡∏° (logout_at = null)
    if (!user.logout_at && user.login_at) {
      const loginAt = new Date(user.login_at);
      const usedMinutes = Math.floor((now - loginAt) / (1000 * 60));
      
      // üî• ‡πÉ‡∏ä‡πâ last_remaining_minutes ‡πÅ‡∏ó‡∏ô remaining_minutes ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
      const baseMinutes = user.last_remaining_minutes ?? user.remaining_minutes ?? 0;
      const remaining = Math.max(0, baseMinutes - usedMinutes);

      console.log('‚è± ‡πÄ‡∏à‡∏≠ session ‡πÄ‡∏Å‡πà‡∏≤ ‚Üí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï logout');
      
      const { error: updateOldSessionError } = await supabase
        .from('starter_plan_users')
        .update({
          logout_at: nowISO,
          used_minutes: usedMinutes,
          remaining_minutes: remaining,
          last_remaining_minutes: remaining  // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
        })
        .eq('id', user.id);

      if (updateOldSessionError) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡πÄ‡∏Å‡πà‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', updateOldSessionError.message);
      } else {
        console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session ‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    }

    // üî• ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£ login
    const currentLoginCount = (user.login_count || 0) + 1;
    console.log(`üìä Login Count: ${currentLoginCount}`);

    // üëâ ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÉ‡∏´‡∏°‡πà: login_at = now, logout_at = null
    const { error: updateNewSessionError } = await supabase
      .from('starter_plan_users')
      .update({
        login_at: nowISO,
        logout_at: null, // reset logout
        login_count: currentLoginCount  // üî• ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£ login
        // **‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reset remaining_minutes ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ** ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å session ‡πÄ‡∏î‡∏¥‡∏°
      })
      .eq('id', user.id);

    if (updateNewSessionError) {
      console.error('‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï login_at ‡πÉ‡∏´‡∏°‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', updateNewSessionError.message);
    } else {
      console.log('üÜï login_at ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
    }

    return res.status(200).json({
      success: true,
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Starter Plan)',
      plan: 'starter',
      expires_at: user.expired_at || null,
      login_count: currentLoginCount  // üî• ‡∏™‡πà‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (optional)
    });

  } catch (err) {
    console.error('üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡πÉ‡∏ô loginStarter:', err);
    return res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
    });
  }
}

module.exports = loginStarter;
