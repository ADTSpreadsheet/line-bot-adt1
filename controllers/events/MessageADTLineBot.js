const { supabase } = require('../../utils/supabaseClient');
const line = require('@line/bot-sdk');

// LINE CONFIG
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

// üìå Logic 2: Message Event Handler
const handleMessageEvent = async (event) => {
  console.log('üî• Message Handler ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  
  try {
    const userId = event.source.userId;
    const msg = event.message;
    
    console.log(`üìù User: ${userId}, Message Type: ${msg.type}`);
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text message
    if (msg.type !== 'text') {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text message - ‡∏Ç‡πâ‡∏≤‡∏°');
      return;
    }
    
    const text = msg.text.trim().toLowerCase();
    console.log(`üí¨ Text Message: "${text}"`);
    
    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á req_refcode
    if (text === 'req_refcode') {
      console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ref_code ‡πÉ‡∏ô database...');
      
      // ‡∏î‡∏∂‡∏á ref_code ‡∏à‡∏≤‡∏Å database
      const { data, error } = await supabase
        .from('auth_sessions')
        .select('ref_code')
        .eq('line_user_id', userId)
        .maybeSingle(); // ‡πÉ‡∏ä‡πâ maybeSingle ‡πÅ‡∏ó‡∏ô single
      
      if (error) {
        console.log('‚ùå Database Error:', error.message);
        await client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        });
        return;
      }
      
      if (data && data.ref_code) {
        console.log(`‚úÖ ‡∏û‡∏ö ref_code: ${data.ref_code}`);
        
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        await client.replyMessage(event.replyToken, {
          type: 'text',
          text: `üîê ‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ "${data.ref_code}"`
        });
        
        console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ref_code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö ref_code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ');
        
        await client.replyMessage(event.replyToken, {
          type: 'text',
          text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
        });
        
        console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö ref_code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } else {
      console.log(`‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "${text}" ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏î‡πÜ`);
      
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: req_refcode`
      });
      
      console.log('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
    
  } catch (error) {
    console.log('‚ùå Message Handler Error:', error.message);
    console.log('‚ùå Error Stack:', error.stack);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÅ‡∏ö‡∏ö generic
    try {
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    } catch (replyError) {
      console.log('‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', replyError.message);
    }
  }
  
  console.log('‚úÖ Message Handler ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î');
};

module.exports = {
  handleMessageEvent
};
