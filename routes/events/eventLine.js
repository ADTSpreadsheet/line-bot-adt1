const express = require('express');
const router = express.Router();

const { supabase } = require('../../utils/supabaseClient');
const line = require('@line/bot-sdk');
const { createModuleLogger } = require('../../utils/logger');
const log = createModuleLogger('ADTLine-Bot');

const {
  getRandomWelcomeMessage,
  getRandomAnnoyedMessage
} = require('../../utils/randomMessageGenerator');




// LINE CONFIG
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code + Serial Key
function generateRefCode() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  const randLetter1 = letters.charAt(Math.floor(Math.random() * letters.length));
  const randLetter2 = letters.charAt(Math.floor(Math.random() * letters.length));
  const randDigit1 = digits.charAt(Math.floor(Math.random() * digits.length));
  const randDigit2 = digits.charAt(Math.floor(Math.random() * digits.length));
  const patterns = [
    randLetter1 + randLetter2 + randDigit1 + randDigit2,
    randDigit1 + randDigit2 + randLetter1 + randLetter2,
    randLetter1 + randDigit1 + randDigit2 + randLetter2,
    randDigit1 + randLetter1 + randDigit2 + randLetter2
  ];
  return patterns[Math.floor(Math.random() * patterns.length)];
}

function generateSerialKey() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  let numericPart = '';
  let letterPart = '';
  for (let i = 0; i < 4; i++) {
    numericPart += digits.charAt(Math.floor(Math.random() * digits.length));
  }
  for (let i = 0; i < 2; i++) {
    letterPart += letters.charAt(Math.floor(Math.random() * letters.length));
  }
  return numericPart + letterPart;
}

// ==============================
// 1Ô∏è‚É£ FOLLOW EVENT
// ==============================

const handleFollow = async (event) => {
  const userId = event.source.userId;
  const timestamp = new Date().toISOString();

  // Step 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase
  const { data, error } = await supabase
    .from('auth_sessions')
    .select('ref_code, expires_at, follow_count, status')  // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á 'source' ‡πÅ‡∏•‡πâ‡∏ß
    .eq('line_user_id', userId)
    .maybeSingle();

  if (error) {
    log.error(`[FOLLOW] ‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ref.Code ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    return;
  }

  let followCount = (data?.follow_count || 0) + 1;
  await supabase
    .from('auth_sessions')
    .update({
      follow_count: followCount,
      line_status: 'Follow'
    })
    .eq('line_user_id', userId);

  // Step 2: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí BLOCK
  if (followCount >= 5) {
    await supabase
      .from('auth_sessions')
      .update({
        follow_count: followCount,
        verify_status: 'BLOCK',
        line_status: 'Follow'
      })
      .eq('line_user_id', userId);

    log.warn(`[FOLLOW] üö´ LINE USER ${userId} ‡∏ñ‡∏π‡∏Å BLOCK ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Follow ‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
    await client.pushMessage(userId, {
      type: 'text',
      text: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å/‡∏õ‡∏•‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üòî`
    });
    return;
  }

  // Step 3: ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ Ref.Code ‡πÅ‡∏•‡πâ‡∏ß
  if (data && data.ref_code) {
    const now = new Date().toISOString();

    // Step 4: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (data.expires_at && data.expires_at <= now) {
      log.warn(`[FOLLOW] ‚åõ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß`);

      await supabase
        .from('auth_sessions')
        .update({ follow_count: followCount, line_status: 'Follow' })
        .eq('line_user_id', userId);

      await client.pushMessage(userId, {
        type: 'text',
        text: `üîí Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üôè`
      });

      return;
    }

    // ‡∏ñ‡πâ‡∏≤ Ref.Code ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô follow
    await supabase
      .from('auth_sessions')
      .update({ follow_count: followCount, line_status: 'Follow' })
      .eq('line_user_id', userId);

    log.info(`[FOLLOW] ‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ Ref.Code ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${userId}`);

    await client.pushMessage(userId, {
      type: 'text',
      text: `${getRandomWelcomeMessage()}\n\nüîê Ref.Code ‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠: ${data.ref_code}`
    });

    return;
  }

  // Step 5: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code + Serial Key
  const refCode = generateRefCode();
  const serialKey = generateSerialKey();

  const { error: insertError } = await supabase
    .from('auth_sessions')
    .insert({
      line_user_id: userId,
      ref_code: refCode,
      serial_key: serialKey,
      status: 'PENDING',
      created_at: timestamp,
      line_status: 'Follow',
      follow_count: followCount
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà source ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    });

  if (insertError) {
    log.error(`[FOLLOW] ‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${insertError.message}`);
    return;
  }

  await supabase
    .from('registered_machines')
    .update({ line_status: 'Follow' })
    .eq('line_user_id', userId);

  /*log.info(`[FOLLOW] ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÅ‡∏•‡∏∞ Serial Key ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);*/

  // Step 6: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ACTIVE ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ completed_at
  await supabase
    .from('auth_sessions')
    .update({
      status: 'ACTIVE',
      completed_at: new Date().toISOString()
    })
    .eq('ref_code', refCode);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å "‡∏ô‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏™"
  await client.pushMessage(userId, {
    type: 'text',
    text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet\n‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏™‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`
  });
};


// ==============================
// 2Ô∏è‚É£ MESSAGE EVENT
// ==============================
const { handleLine3DMessage } = require('../../controllers/LineMessage3DController');

const handleMessage = async (event) => {
  const userId = event.source.userId;
  const msg = event.message;

  if (msg.type !== 'text') return;

  const text = msg.text.trim().toLowerCase();

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'req_refcode' ‚Üí ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
  if (text === 'req_refcode') {
    const { data, error } = await supabase
      .from('auth_sessions')
      .select('ref_code')
      .eq('line_user_id', userId)
      .single();

    if (error || !data || !data.ref_code) {
      log.warn(`[REQ_REFCODE] ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${userId}`);
      await client.replyMessage(event.replyToken, {
        type: 'text',
        text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR ‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö'
      });
      return;
    }

    await client.replyMessage(event.replyToken, {
      type: 'text',
      text: `üîê Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: ${data.ref_code}`
    });
    return;
  }

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'req_refcode' ‚Üí ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏∞‡∏ö‡∏ö 3D Messaging
  await handleLine3DMessage(event);
};

// ==============================
// 3Ô∏è‚É£ Unfollow ADTLine-Bot
// ==============================
const handleUnfollow = async (event) => {
  const userId = event.source.userId;
  const updates = { line_status: 'unfollow' };

  log.warn(`üî• ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° ADTLine-Bot ‡πÅ‡∏•‡πâ‡∏ß`);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status ‡πÉ‡∏ô auth_sessions
  const { error: authError } = await supabase
    .from('registered_machines')
    .update({
      line_status: 'Unfollow',
    })
    .eq('line_user_id', userId);

  if (authError) {
    log.error(`‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status (auth_sessions) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${authError.message}`);
  } else {
    /*log.info(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions -> line_status = 'unfollow' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);*/
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status ‡πÉ‡∏ô registered_machines
  const { error: regError } = await supabase
    .from('registered_machines')
    .update(updates)
    .eq('line_user_id', userId);

  if (regError) {
    log.error(`‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï line_status (registered_machines) ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${regError.message}`);
  } else {
    /*log.info(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï registered_machines -> line_status = 'unfollow' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);*/
  }
};




// ==============================
// 3Ô∏è‚É£ SEND SERIAL KEY AFTER REF.CODE VERIFIED
// ==============================

async function sendLineMessage(lineUserId, serialKey, refCode) {
  try {
    const message = `üîê ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ref.Code: ${refCode}\n‚û°Ô∏è Serial Key ‡∏Ñ‡∏∑‡∏≠   ${serialKey}`;
    await client.pushMessage(lineUserId, {
      type: 'text',
      text: message
    });
    /*log.info(`‚úÖ ‡∏™‡πà‡∏á Serial Key ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE User ID: ${lineUserId}`);*/
  } catch (error) {
    log.error(`‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${error.message}`);
    throw error;
  }
}

// ==============================
// WEBHOOK ROUTE
// ==============================
router.post('/', async (req, res) => {
  const events = req.body.events;

  if (!events || events.length === 0) {
    return res.status(200).end();
  }

  for (const event of events) {
    if (event.type === 'follow') {
      await handleFollow(event);
    } else if (event.type === 'message') {
      await handleMessage(event);
    }
  }

  res.status(200).end();
});


module.exports = {
  router,
  sendLineMessage
};
