const { supabase } = require('../utils/supabaseClient');
const uploadBase64Image = require('../utils/uploadBase64Image');
const axios = require('axios');
const line = require('@line/bot-sdk');

// LINE Bot Client (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ token)
let client = null;
if (process.env.LINE_BOT_ACCESS_TOKEN) {
  client = new line.Client({
    channelAccessToken: process.env.LINE_BOT_ACCESS_TOKEN
  });
} else {
  console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_BOT_ACCESS_TOKEN - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ axios ‡πÅ‡∏ó‡∏ô');
}

async function submitStarterSlip(req, res) {
  try {
    const {
      ref_code,
      first_name,
      last_name,
      national_id,
      phone_number,
      duration,
      file_content
    } = req.body;

    // ‚úÖ Logic 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!ref_code || !first_name || !last_name || !national_id || !phone_number || !duration || !file_content) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    // ‚úÖ Logic 2.1: ‡∏ï‡∏£‡∏ß‡∏à ref_code ‡πÉ‡∏ô auth_sessions
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('serial_key, line_user_id')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ref_code ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const { serial_key, line_user_id } = sessionData;
    const duration_minutes = duration * 1440;

    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô
    const slipFileName = `SP-${ref_code}.jpg`;

    // ‚úÖ Logic 2.2: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤ Supabase
    const { publicUrl, error: uploadError } = await uploadBase64Image({
      base64String: file_content,
      fileName: slipFileName,
      bucketName: 'statercustumer',
      folderName: ref_code
    });

    if (uploadError) {
      console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", uploadError);
      return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: uploadError });
    }

    // ‚úÖ Logic 2.3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á starter_plan_users
    const insertResult = await supabase
      .from('starter_plan_users')
      .insert([
        {
          ref_code,
          first_name,
          last_name,
          national_id,
          phone_number,
          duration_minutes,
          remaining_minutes: duration_minutes,
          used_minutes: 0,
          slip_image_url: publicUrl,
          submissions_status: 'pending',
          line_user_id
        }
      ]);

    if (insertResult.error) {
      console.error("‚ùå insert starter_plan_users ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", insertResult.error);
      return res.status(500).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: insertResult.error });
    }

    // ‚úÖ Logic 3: ‡πÅ‡∏à‡πâ‡∏á Bot2 ‡∏ú‡πà‡∏≤‡∏ô API2
    const response = await axios.post(`${process.env.API2_URL}/starter/notify-admin-slip`, {
      ref_code,
      duration
    });

    // ‚úÖ Logic 4: ‡∏ñ‡πâ‡∏≤ Flex ‡πÑ‡∏õ‡∏´‡∏≤‡∏ù‡∏±‡πà‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
    if (response.status === 200) {
      const username = `ADT-${ref_code}`;
      const password = serial_key;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username/password
      const { error: updateError } = await supabase
        .from('starter_plan_users')
        .update({ username, password })
        .eq('ref_code', ref_code);

      if (updateError) {
        console.error('‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username/password ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', updateError);
        return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
      }

      // ‚úÖ ‡∏™‡πà‡∏á Flex ‡πÑ‡∏õ‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      if (client) {
        // ‡πÉ‡∏ä‡πâ LINE SDK
        const flexMessage = {
          type: "flex",
          altText: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
          contents: {
            type: "bubble",
            header: {
              type: "box",
              layout: "vertical",
              contents: [
                {
                  type: "text",
                  text: "üìå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠",
                  weight: "bold",
                  color: "#007BFF",
                  size: "lg"
                }
              ],
              backgroundColor: "#F8F9FA",
              paddingAll: "lg"
            },
            body: {
              type: "box",
              layout: "vertical",
              spacing: "md",
              contents: [
                {
                  type: "text",
                  text: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Starter Plan ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠:",
                  weight: "bold",
                  size: "md"
                },
                {
                  type: "text",
                  text: `- Ref.Code: ${ref_code}`,
                  size: "sm"
                },
                {
                  type: "text",
                  text: `- Username: ${username}`,
                  size: "sm"
                },
                {
                  type: "text",
                  text: `- Password: ${password}`,
                  size: "sm"
                },
                {
                  type: "text",
                  text: `- ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${duration} ‡∏ß‡∏±‡∏ô`,
                  size: "sm"
                },
                {
                  type: "text",
                  text: "‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Login ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‚úÖ",
                  wrap: true,
                  size: "sm",
                  color: "#28A745"
                }
              ],
              paddingAll: "lg"
            }
          }
        };

        // ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á line_user_id
        await client.pushMessage(line_user_id, flexMessage);
      } else {
        // ‡πÉ‡∏ä‡πâ axios ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Bot ‡∏≠‡∏∑‡πà‡∏ô
        await axios.post(`${process.env.API2_URL}/starter/notify-admin-starter`, {
          ref_code,          
          duration         
        });
      }

      return res.status(200).json({
        message: '‚úÖ ‡∏™‡πà‡∏á Flex ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
      });
    } else {
      return res.status(500).json({ message: '‚ùå Bot2 ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Flex ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÑ‡∏î‡πâ' });
    }

  } catch (err) {
    console.error('‚ùå ERROR @ submitStarterSlip:', err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', error: err.message });
  }
}

module.exports = submitStarterSlip;
