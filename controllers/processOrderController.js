const line = require('@line/bot-sdk');
const { supabase } = require('../utils/supabaseClient');
require('dotenv').config();

// LINE Bot 1 Client (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ User)
const client = new line.Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
});

// üé® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏´‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
const createUpdatedAdminFlex = (userData, ref_code, action, actionData = {}) => {
  const { first_name, last_name, order_number } = userData;
  const full_name = `${first_name} ${last_name}`;
  const isApproved = action === 'approved';
  const actionText = isApproved ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò';
  const statusColor = isApproved ? '#28a745' : '#dc3545';
  const statusIcon = isApproved ? '‚úÖ' : '‚ùå';

  return {
    type: "flex",
    altText: `${actionText}‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ${full_name} ‡πÅ‡∏•‡πâ‡∏ß`,
    contents: {
      type: "bubble",
      header: {
        type: "box",
        layout: "vertical",
        contents: [
          {
            type: "text",
            text: `${statusIcon} Starter Plan no. ${order_number || 'N/A'}`,
            size: "md",
            weight: "bold",
            color: statusColor
          }
        ],
        backgroundColor: "#F8F9FA",
        paddingAll: "sm"
      },
      body: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          { type: "text", text: `üî¢ Ref.Code: ${ref_code}`, size: "sm", weight: "bold", color: "#007BFF" },
          { type: "text", text: `üë§ ‡∏ä‡∏∑‡πà‡∏≠: ${full_name}`, size: "sm" },
          { type: "text", text: `üì± ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${userData.phone_number || 'N/A'}`, size: "sm" },
          { type: "text", text: `üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£: ${userData.national_id || 'N/A'}`, size: "sm" },
          { type: "text", text: `‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: ${actionData.duration || 'N/A'} ‡∏ß‡∏±‡∏ô`, size: "sm" },
          { type: "text", text: `üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: ${userData.price_thb || 'N/A'} ‡∏ö‡∏≤‡∏ó`, size: "sm" }
        ],
        paddingAll: "sm"
      },
      footer: {
        type: "box",
        layout: "vertical",
        spacing: "xs",
        contents: [
          // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
          {
            type: 'text',
            text: `${statusIcon} ${actionText}‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß`,
            weight: 'bold',
            color: statusColor,
            align: 'center',
            size: 'md',
            margin: 'md'
          },
          {
            type: 'text',
            text: `${actionText}‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}`,
            size: 'xs',
            color: '#666666',
            align: 'center',
            margin: 'sm'
          },
          // ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
          ...(userData.slip_image_url ? [{
            type: 'button',
            style: 'link',
            action: {
              type: 'uri',
              label: 'üìÑ ‡∏î‡∏π‡∏™‡∏•‡∏¥‡∏õ',
              uri: userData.slip_image_url
            },
            height: "sm",
            margin: "md"
          }] : [])
        ],
        paddingAll: "sm"
      }
    }
  };
};

const processOrder = async (req, res) => {
  try {
    const { ref_code, action, license_no, plan_type } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!ref_code || !action) {
      return res.status(400).json({ message: 'ref_code ‡πÅ‡∏•‡∏∞ action ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Plan
    const isPro = license_no ? true : false;
    const isStarter = plan_type === 'starter' ? true : false;

    if (!isPro && !isStarter) {
      return res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Plan ‡πÑ‡∏î‡πâ' });
    }

    const planName = isPro ? 'Professional' : 'Starter';
    console.log(`üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å API2: ${action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'} - ${planName} Plan - ${ref_code}`);

    if (action === 'approve') {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      if (isPro) {
        await handleProApprovalProcess(ref_code, license_no);
      } else {
        await handleStarterApprovalProcess(ref_code);
      }
    } else if (action === 'reject') {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò  
      if (isPro) {
        await handleProRejectionProcess(ref_code, license_no);
      } else {
        await handleStarterRejectionProcess(ref_code);
      }
    } else {
      return res.status(400).json({ message: 'action ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô approve ‡∏´‡∏£‡∏∑‡∏≠ reject' });
    }

    // ‚úÖ ‡∏ï‡∏≠‡∏ö 200 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ API2
    return res.status(200).json({ 
      message: `${action === 'approve' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'} ${planName} Plan ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      ref_code,
      plan_type: planName.toLowerCase()
    });

  } catch (error) {
    console.error('‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Duplicate Error ‡∏™‡πà‡∏á 400 ‡πÅ‡∏ó‡∏ô 500
    if (error.message.includes('‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß')) {
      return res.status(400).json({ error: error.message });
    }
    
    return res.status(500).json({ error: error.message });
  }
};

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Professional Plan
const handleProApprovalProcess = async (ref_code, license_no) => {
  try {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Pro Plan: ${ref_code}, ${license_no}`);

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const { data: existingSlip, error: checkError } = await supabase
      .from('slip_submissions')
      .select('submissions_status')
      .eq('ref_code', ref_code)
      .eq('license_no', license_no)
      .single();

    if (checkError) throw checkError;

    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    if (existingSlip?.submissions_status === 'Approved') {
      console.log('‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      throw new Error(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Ref.Code ${ref_code} ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`);
    }

    // Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô slip_submissions ‡πÄ‡∏õ‡πá‡∏ô 'Approved'
    const { error: updateSlipError } = await supabase
      .from('slip_submissions')
      .update({ submissions_status: 'Approved' })
      .eq('ref_code', ref_code)
      .eq('license_no', license_no);

    if (updateSlipError) throw updateSlipError;
    console.log('‚úÖ Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ slip_submissions ‡πÅ‡∏•‡πâ‡∏ß');

    // ‡∏î‡∏∂‡∏á serial_key ‡∏à‡∏≤‡∏Å auth_sessions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logic 2
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, serial_key')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô auth_sessions');
    }

    const { line_user_id, serial_key } = sessionData;

    // Logic 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username ‡πÅ‡∏•‡∏∞ password ‡πÉ‡∏ô license_holders
    const { error: updateLicenseError } = await supabase
      .from('license_holders')
      .update({
        username: license_no,  // username = license_no
        password: serial_key   // password = serial_key ‡∏à‡∏≤‡∏Å auth_sessions
      })
      .eq('license_no', license_no);

    if (updateLicenseError) throw updateLicenseError;
    console.log('‚úÖ Logic 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username/password ‡πÉ‡∏ô license_holders ‡πÅ‡∏•‡πâ‡∏ß');

    // Logic 3: ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (Professional Plan)
    const flexMessage = {
      type: 'flex',
      altText: 'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          spacing: 'md',
          contents: [
            {
              type: 'text',
              text: 'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              weight: 'bold',
              size: 'lg',
              color: '#0099FF'
            },
            {
              type: 'text',
              text: 'üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
              weight: 'bold',
              margin: 'md'
            },
            {
              type: 'text',
              text: 'üì¶ ‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: Professional-Plan',
              size: 'sm',
              margin: 'sm'
            },
            {
              type: 'text',
              text: '‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
              size: 'sm'
            },
            {
              type: 'text',
              text: `üë§ Username: ${license_no}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `üîë Password: ${serial_key}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: '‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Login ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö',
              wrap: true,
              margin: 'md',
              color: '#28a745',
              weight: 'bold'
            }
          ]
        }
      }
    };

    await client.pushMessage(line_user_id, flexMessage);
    console.log(`‚úÖ Logic 3: ‡∏™‡πà‡∏á Flex Message Pro Plan ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleProApprovalProcess:', error);
    throw error;
  }
};

// üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Starter Plan
const handleStarterApprovalProcess = async (ref_code) => {
  try {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Starter Plan: ${ref_code}`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å starter_plan_users
    const { data: starterData, error: starterError } = await supabase
      .from('starter_plan_users')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('submissions_status', 'pending')
      .single();

    if (starterError || !starterData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users');
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÅ‡∏Ñ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï)
    if (starterData.submissions_status === 'approved') {
      console.log('‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      throw new Error(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Ref.Code ${ref_code} ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`);
    }

    const { duration_minutes, line_user_id } = starterData;
    const durationDays = Math.floor(duration_minutes / 1440);

    // ‡∏î‡∏∂‡∏á serial_key ‡∏à‡∏≤‡∏Å auth_sessions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á password
    const { data: authData, error: authError } = await supabase
      .from('auth_sessions')
      .select('serial_key')
      .eq('ref_code', ref_code)
      .single();

    if (authError || !authData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• serial_key ‡πÉ‡∏ô auth_sessions');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á username ‡πÅ‡∏•‡∏∞ password
    const username = `ADT-${durationDays}D-${ref_code}`;
    const password = authData.serial_key;

    console.log('üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á Username/Password:', { username, password });

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏° username/password
    const { error: updateError } = await supabase
      .from('starter_plan_users')
      .update({ 
        submissions_status: 'approved',
        username: username,
        password: password
      })
      .eq('ref_code', ref_code);

    if (updateError) throw updateError;
    console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ starter_plan_users ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (Starter Plan)
    const flexMessage = {
      type: 'flex',
      altText: 'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      contents: {
        type: 'bubble',
        body: {
          type: 'box',
          layout: 'vertical',
          spacing: 'md',
          contents: [
            {
              type: 'text',
              text: 'üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
              weight: 'bold',
              size: 'lg',
              color: '#0099FF'
            },
            {
              type: 'text',
              text: 'üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
              weight: 'bold',
              margin: 'md'
            },
            {
              type: 'text',
              text: 'üì¶ ‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à: Starter-Plan',
              size: 'sm',
              margin: 'sm'
            },
            {
              type: 'text',
              text: `‚è∞ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: ${durationDays} ‡∏ß‡∏±‡∏ô`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `üë§ Username: ${username}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `üîë Password: ${password}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: '‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Login ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö',
              wrap: true,
              margin: 'md',
              color: '#28a745',
              weight: 'bold'
            }
          ]
        }
      }
    };

    await client.pushMessage(line_user_id, flexMessage);
    console.log(`‚úÖ ‡∏™‡πà‡∏á Flex Message Starter Plan ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

    // üé® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin
    try {
      const { data: msgData, error: msgError } = await supabase
        .from('starter_plan_users')
        .select('admin_message_id, first_name, last_name, order_number, phone_number, national_id, price_thb, slip_image_url')
        .eq('ref_code', ref_code)
        .single();

      if (msgError) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á admin_message_id ‡πÑ‡∏î‡πâ:', msgError);
      } else if (msgData?.admin_message_id) {
        const updatedFlex = createUpdatedAdminFlex(msgData, ref_code, 'approved', { duration: durationDays });
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bot2 (Admin)
        const adminClient = new line.Client({
          channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN || process.env.LINE_CHANNEL_ACCESS_TOKEN
        });
        
        await adminClient.editMessage(msgData.admin_message_id, updatedFlex);
        console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (editError) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin ‡πÑ‡∏î‡πâ:', editError.message);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleStarterApprovalProcess:', error);
    throw error;
  }
};

// üö´ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Professional Plan
const handleProRejectionProcess = async (ref_code, license_no) => {
  try {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Pro Plan: ${ref_code}, ${license_no}`);

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    const { data: existingSlip, error: checkError } = await supabase
      .from('slip_submissions')
      .select('submissions_status')
      .eq('ref_code', ref_code)
      .eq('license_no', license_no)
      .single();

    if (checkError) throw checkError;

    // ‡∏ñ‡πâ‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    if (existingSlip?.submissions_status === 'Rejected') {
      console.log('‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      throw new Error(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Ref.Code ${ref_code} ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`);
    }

    // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    if (existingSlip?.submissions_status === 'Approved') {
      console.log('‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ');
      throw new Error(`Ref.Code ${ref_code} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ`);
    }

    // Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô slip_submissions ‡πÄ‡∏õ‡πá‡∏ô 'Rejected'
    const { error: updateSlipError } = await supabase
      .from('slip_submissions')
      .update({ submissions_status: 'Rejected' })
      .eq('ref_code', ref_code)
      .eq('license_no', license_no);

    if (updateSlipError) throw updateSlipError;
    console.log('‚úÖ Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ slip_submissions ‡πÄ‡∏õ‡πá‡∏ô Rejected ‡πÅ‡∏•‡πâ‡∏ß');

    // ‡∏î‡∏∂‡∏á line_user_id ‡∏à‡∏≤‡∏Å auth_sessions
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô auth_sessions');
    }

    const { line_user_id } = sessionData;

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    await client.pushMessage(line_user_id, {
      type: 'text',
      text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\nüìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Tumcivil\n‚òéÔ∏è ‡πÇ‡∏ó‡∏£ : 089-499-0739'
    });

    console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Pro Plan ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleProRejectionProcess:', error);
    throw error;
  }
};

// üö´ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Starter Plan
const handleStarterRejectionProcess = async (ref_code) => {
  try {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Starter Plan: ${ref_code}`);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å starter_plan_users
    const { data: starterData, error: starterError } = await supabase
      .from('starter_plan_users')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('submissions_status', 'pending')
      .single();

    if (starterError || !starterData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô starter_plan_users');
    }

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÅ‡∏Ñ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö)
    if (starterData.submissions_status === 'rejected') {
      console.log('‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß');
      throw new Error(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Ref.Code ${ref_code} ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß`);
    }

    if (starterData.submissions_status === 'approved') {
      console.log('‚ö†Ô∏è ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ');
      throw new Error(`Ref.Code ${ref_code} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏î‡πâ`);
    }

    const { line_user_id, duration_minutes } = starterData;
    const durationDays = Math.floor(duration_minutes / 1440);

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    const { error: updateError } = await supabase
      .from('starter_plan_users')
      .update({ 
        submissions_status: 'rejected'
      })
      .eq('ref_code', ref_code);

    if (updateError) throw updateError;
    console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ starter_plan_users ‡πÄ‡∏õ‡πá‡∏ô rejected ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    await client.pushMessage(line_user_id, {
      type: 'text',
      text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥\nüìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Tumcivil\n‚òéÔ∏è ‡πÇ‡∏ó‡∏£ : 089-499-0739'
    });

    console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Starter Plan ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

    // üé® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin
    try {
      const { data: msgData, error: msgError } = await supabase
        .from('starter_plan_users')
        .select('admin_message_id, first_name, last_name, order_number, phone_number, national_id, price_thb, slip_image_url')
        .eq('ref_code', ref_code)
        .single();

      if (msgError) {
        console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á admin_message_id ‡πÑ‡∏î‡πâ:', msgError);
      } else if (msgData?.admin_message_id) {
        const updatedFlex = createUpdatedAdminFlex(msgData, ref_code, 'rejected', { duration: durationDays });
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Bot2 (Admin)
        const adminClient = new line.Client({
          channelAccessToken: process.env.LINE_BOT2_ACCESS_TOKEN || process.env.LINE_CHANNEL_ACCESS_TOKEN
        });
        
        await adminClient.editMessage(msgData.admin_message_id, updatedFlex);
        console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }
    } catch (editError) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex Message ‡∏Ç‡∏≠‡∏á Admin ‡πÑ‡∏î‡πâ:', editError.message);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleStarterRejectionProcess:', error);
    throw error;
  }
};

module.exports = { processOrder };
