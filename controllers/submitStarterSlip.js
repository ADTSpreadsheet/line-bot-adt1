const { supabase } = require('../utils/supabaseClient');
const uploadBase64Image = require('../utils/uploadBase64Image');
const runOCR = require('../utils/ocr/runOCR');
const extractInfoFromText = require('../utils/ocr/extractInfoFromText');
const axios = require('axios');
const line = require('@line/bot-sdk');

// LINE Bot Client
let client = null;
if (process.env.LINE_CHANNEL_ACCESS_TOKEN) {
  client = new line.Client({
    channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
  });
} else {
  console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_CHANNEL_ACCESS_TOKEN - ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Flex ‡πÑ‡∏î‡πâ');
}

async function submitStarterSlip(req, res) {
  try {
    const {
      ref_code,
      first_name,
      last_name,
      national_id,
      phone_number,
      duration,
      file_content
    } = req.body;

    if (!ref_code || !first_name || !last_name || !national_id || !phone_number || !duration || !file_content) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à session
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('serial_key, line_user_id')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ref_code ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    const { serial_key, line_user_id } = sessionData;

    // ‚úÖ 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const { data: existingValidRecord, error: checkError } = await supabase
      .from('starter_plan_users')
      .select('*')
      .eq('ref_code', ref_code)
      .eq('ref_code_status', 'valid')
      .maybeSingle();

    if (checkError) {
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
    }

    if (existingValidRecord) {
      return res.status(409).json({ 
        message: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß',
        existing_order: existingValidRecord.order_number
      });
    }

    const duration_minutes = duration * 1440;
    const slipFileName = `SP-${ref_code}.jpg`;

    // ‚úÖ 3. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏Ç‡πâ‡∏≤ Supabase
    const { publicUrl, error: uploadError } = await uploadBase64Image({
      base64String: file_content,
      fileName: slipFileName,
      bucketName: 'statercustumer',
      folderName: ref_code
    });

    if (uploadError) {
      return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: uploadError });
    }

    // ‚úÖ 4. OCR & ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á starter_slip_ocr_logs
    try {
      const rawText = await runOCR(publicUrl);
      const parsed = extractInfoFromText(rawText);

      await supabase.from('starter_slip_ocr_logs').insert({
        ref_code,
        slip_path: publicUrl,
        raw_text: rawText,
        amount: parsed.amount,
        transfer_date: parsed.transferDate,
        transfer_time: parsed.transferTime,
        sender_name: parsed.senderName,
        status: 'pending'
      });

      console.log('üßæ OCR ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á starter_slip_ocr_logs ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');

    } catch (ocrErr) {
      console.warn('‚ö†Ô∏è OCR failed:', ocrErr.message);
    }

    // ‚úÖ 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á order_number
    const { data: existingOrders, error: countError } = await supabase
      .from('starter_plan_users')
      .select('order_number')
      .eq('duration_minutes', duration_minutes)
      .not('order_number', 'is', null);

    const maxOrderNumber = existingOrders
      .filter(order => order.order_number?.startsWith(`${duration}D-`))
      .map(order => {
        const match = order.order_number.match(/-(\d+)$/);
        return match ? parseInt(match[1]) : 0;
      })
      .reduce((max, num) => Math.max(max, num), 0);

    const sequentialNumber = maxOrderNumber + 1;
    const order_number = `${duration}D-${sequentialNumber.toString().padStart(4, '0')}`;
    const price_thb = Math.round((5500 / 15) * duration * 100) / 100;

    // ‚úÖ 6. Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏•‡∏á starter_plan_users
    const insertResult = await supabase
      .from('starter_plan_users')
      .insert([
        {
          ref_code,
          first_name,
          last_name,
          national_id,
          phone_number,
          duration_minutes,
          remaining_minutes: duration_minutes,
          used_minutes: 0,
          slip_image_url: publicUrl,
          submissions_status: 'pending',
          ref_code_status: 'pending',
          line_user_id,
          order_number,
          price_thb
        }
      ]);

    if (insertResult.error) {
      return res.status(500).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error: insertResult.error });
    }

    // ‚úÖ 7. ‡πÅ‡∏à‡πâ‡∏á Bot2 (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    try {
      const notifyRes = await axios.post(`${process.env.API2_URL}/starter/notify-admin-slip`, {
        ref_code,
        duration
      });

      if (notifyRes.status === 200) {
        return res.status(200).json({
          message: '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          data: {
            ref_code,
            duration,
            order_number,
            price_thb,
            status: 'pending_approval'
          }
        });
      } else {
        throw new Error(`Unexpected status: ${notifyRes.status}`);
      }

    } catch (notifyErr) {
      console.error('‚ùå ‡πÅ‡∏à‡πâ‡∏á Bot2 ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', notifyErr.message);
      return res.status(500).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏à‡πâ‡∏á Bot2 ‡πÑ‡∏î‡πâ' });
    }

  } catch (err) {
    console.error('‚ùå submitStarterSlip ERROR:', err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', error: err.message });
  }
}

module.exports = submitStarterSlip;
