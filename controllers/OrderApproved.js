// controllers/OrderApproved.js

const axios = require('axios');
const { supabase } = require('../utils/supabaseClient');
const line = require('@line/bot-sdk');

require('dotenv').config();

// LINE Bot 1 Client
const client = new line.Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
});

const handleOrderApproved = async (req, res) => {
  try {
    const { ref_code, license_no } = req.body;

    if (!ref_code || !license_no) {
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ref_code ‡πÅ‡∏•‡∏∞ license_no' });
    }

    console.log(`üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ref_code = ${ref_code}, license_no = ${license_no}`);

    // 1Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ slip_submissions ‡πÄ‡∏õ‡πá‡∏ô Approved
    const { error: updateSlipError } = await supabase
      .from('slip_submissions')
      .update({ submissions_status: 'approved' })
      .eq('ref_code', ref_code)
      .eq('license_no', license_no);

    if (updateSlipError) throw updateSlipError;
    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ slip_submissions ‡πÅ‡∏•‡πâ‡∏ß');

    // 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á line_user_id ‡πÅ‡∏•‡∏∞ serial_key ‡∏à‡∏≤‡∏Å auth_sessions
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, serial_key')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô auth_sessions');
    }

    const { line_user_id, serial_key } = sessionData;

    // 3Ô∏è‚É£ ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const message = {
      type: 'flex',
      altText: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ADTSpreadsheet',
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [{
            type: 'text',
            text: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
            weight: 'bold',
            size: 'lg',
            color: '#0099FF'
          }]
        },
        body: {
          type: 'box',
          layout: 'vertical',
          spacing: 'md',
          contents: [
            {
              type: 'text',
              text: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
              wrap: true
            },
            {
              type: 'text',
              text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠:',
              wrap: true
            },
            {
              type: 'text',
              text: `License no : ${license_no}`,
              weight: 'bold',
              size: 'sm'
            },
            {
              type: 'text',
              text: `Ref.Code : ${ref_code}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `Username : ${license_no}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `Password : ${serial_key}`,
              size: 'sm'
            }
          ]
        }
      }
    };

    await client.pushMessage(line_user_id, message);
    console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

    // 4Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï license_holders ‚Üí username = license_no, password = serial_key
    const { error: updateLicenseError } = await supabase
      .from('license_holders')
      .update({
        username: license_no,
        password: serial_key
      })
      .eq('license_no', license_no);

    if (updateLicenseError) throw updateLicenseError;
    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username / password ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô license_holders');

    return res.status(200).json({ message: '‚úÖ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô OrderApproved:', error.message);
    return res.status(500).json({ error: error.message });
  }
};

module.exports = handleOrderApproved;
