// üëâ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Supabase ‡∏Å‡πà‡∏≠‡∏ô
const { supabase } = require('../utils/supabaseClient');

// üëâ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö logic ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏±‡∏î‡πÇ‡∏ï‡πä‡∏∞
const handleFullPurchase = async (req, res) => {
  try {
    // üü° STEP 1: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const {  
      ref_code, first_name, last_name, address, postal_code, 
      phone_number, email, national_id, file_name, file_content 
    } = req.body;

    // üîç Logic 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!ref_code?.trim() || !first_name?.trim() || !last_name?.trim() || 
        !address?.trim() || !postal_code?.trim() || !phone_number?.trim()) {
      console.log("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:", req.body);
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
    }
    console.log("‚úÖ Logic1 ‡∏ú‡πà‡∏≤‡∏ô: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß");

    // üîç Logic 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ref_code ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô auth_sessions ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('*')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ref_code ‡πÉ‡∏ô auth_sessions:", ref_code);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Ref.Code' });
    }

    // üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡πÉ‡∏ô auth_sessions
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        first_name,
        last_name,
        phone_number, 
        postal_code, 
        email,
        national_id      
      })
      .eq('ref_code', ref_code);

    if (updateError) {
      console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", updateError);
      return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");

    // üü¢ Logic 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á license_no ‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå license_no
const { data: allLicenses, error: licenseFetchError } = await supabase
  .from('license_holders')
  .select('license_no');

if (licenseFetchError) {
  console.error('‚ùå ‡∏î‡∏∂‡∏á license_no ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:', licenseFetchError);
  return res.status(500).json({ message: '‡∏î‡∏∂‡∏á license_no ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
}

// üî¢ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
const maxNum = allLicenses
  .map(row => parseInt(row.license_no.replace('ADT', ''), 10))
  .filter(num => !isNaN(num))
  .reduce((max, num) => Math.max(max, num), 0);

// üÜï ‡∏£‡∏±‡∏ô‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡∏°‡πà‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
const newLicenseNo = `ADT${(maxNum + 1).toString().padStart(3, '0')}`;
console.log('‚úÖ license_no ‡πÉ‡∏´‡∏°‡πà:', newLicenseNo);

    // ‚úÖ ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö
    return res.status(200).json({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß' });

  } catch (err) {
    console.error("‚ùå ERROR ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°:", err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
};

module.exports = handleFullPurchase;
