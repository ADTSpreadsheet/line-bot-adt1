// üëâ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Supabase ‡∏Å‡πà‡∏≠‡∏ô
const { supabase } = require('../utils/supabaseClient');

const handleFullPurchase = async (req, res) => {
  try {
    // üü° STEP 1: ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const {
      ref_code,
      first_name,
      last_name,
      address,
      postal_code,
      phone_number,
      email,
      national_id,
      file_name,
      file_content
    } = req.body;

    // üîç Logic 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (
      !ref_code?.trim() ||
      !first_name?.trim() ||
      !last_name?.trim() ||
      !address?.trim() ||
      !postal_code?.trim() ||
      !phone_number?.trim()
    ) {
      console.log("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö:", req.body);
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö' });
    }
    console.log("‚úÖ Logic1 ‡∏ú‡πà‡∏≤‡∏ô: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß");

    // üîç Logic 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ref_code ‡πÉ‡∏ô auth_sessions
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('*')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö ref_code ‡πÉ‡∏ô auth_sessions:", ref_code);
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Ref.Code' });
    }

    console.log("‚úÖ Logic2 ‡∏ú‡πà‡∏≤‡∏ô: ‡∏û‡∏ö session", sessionData);

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏•‡∏á‡πÉ‡∏ô auth_sessions
    const { error: updateError } = await supabase
      .from('auth_sessions')
      .update({
        first_name,
        last_name,
        phone_number,
        postal_code,
        email,
        national_id,
        updated_at: new Date().toISOString()
      })
      .eq('ref_code', ref_code);

    if (updateError) {
      console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", updateError);
      return res.status(500).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    }

    console.log("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï auth_sessions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");

    // üîÅ Logic 3: ‡∏≠‡∏≠‡∏Å license_no ‡πÉ‡∏´‡∏°‡πà
    const { data: lastLicenseRow, error: licenseFetchError } = await supabase
      .from('license_holders')
      .select('license_no')
      .order('created_at', { ascending: false })
      .limit(1);

    if (licenseFetchError) {
      console.error('‚ùå ‡∏î‡∏∂‡∏á license_no ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', licenseFetchError);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á license_no ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' });
    }

    const lastNo = lastLicenseRow?.[0]?.license_no || 'ADT000';
    const nextNum = parseInt(lastNo.replace('ADT', ''), 10) + 1;
    const newLicenseNo = `ADT${nextNum.toString().padStart(3, '0')}`;

    console.log('‚úÖ Logic3: license_no ‡πÉ‡∏´‡∏°‡πà =', newLicenseNo);

    // üßæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å license ‡πÉ‡∏´‡∏°‡πà
    const { error: insertLicenseError } = await supabase
      .from('license_holders')
      .insert([
        {
          license_no: newLicenseNo,
          ref_code,
          first_name,
          last_name,
          national_id,
          phone_number,
          email,
          address,
          postal_code,
          line_user_id: sessionData.line_user_id,
          pdpa_status: true,
          is_verify: true
        }
      ]);

    if (insertLicenseError) {
      console.error('‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å license ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', insertLicenseError);
      return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å license ‡πÉ‡∏´‡∏°‡πà' });
    }

    console.log('‚úÖ Logic3 ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å license_holders ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    // ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πá‡∏ö‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    return res.status(200).json({
      message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Logic 1 + 2 + 3)',
      license_no: newLicenseNo
    });

  } catch (err) {
    console.error("‚ùå ERROR ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°:", err);
    return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
  }
};

module.exports = handleFullPurchase;
