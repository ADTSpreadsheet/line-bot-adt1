const { supabase } = require('../../utils/supabaseClient');

async function logoutController(req, res) {
  try {
    const { username } = req.body;
    
    if (!username) {
      return res.status(400).json({ success: false, message: 'Username is required' });
    }

    // üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° username
    const { data, error } = await supabase
      .from('starter_plan_users')
      .select('*')
      .eq('username', username)
      .single();

    if (error || !data) {
      return res.status(404).json({ success: false, message: 'User not found' });
    }

    const now = new Date();
    const loginTime = new Date(data.login_at);
    const logoutTime = now;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const usedMinutes = Math.floor((logoutTime - loginTime) / 60000);
    
    // üî• ‡πÄ‡∏ä‡πá‡∏Ñ login_count ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏π‡∏ï‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    let remainingMinutes;
    
    if (data.login_count === 1) {
      // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: ‡πÉ‡∏ä‡πâ duration_minutes
      remainingMinutes = Math.max(0, data.duration_minutes - usedMinutes);
    } else {
      // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 2+: ‡πÉ‡∏ä‡πâ remaining_minutes ‡πÄ‡∏î‡∏¥‡∏°
      remainingMinutes = Math.max(0, data.remaining_minutes - usedMinutes);
    }

    // ‚úçÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï logout, used_minutes, remaining_minutes ‡πÅ‡∏•‡∏∞ last_remaining_minutes
    const { error: updateError } = await supabase
      .from('starter_plan_users')
      .update({
        logout_at: logoutTime.toISOString(),
        used_minutes: usedMinutes,
        remaining_minutes: remainingMinutes
      })
      .eq('id', data.id);

    if (updateError) {
      console.error('‚ùå Error updating logout info:', updateError.message);
      return res.status(500).json({ success: false, message: 'Failed to update logout info' });
    }

    // üîí ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 0 ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ref_code_status ‡πÄ‡∏õ‡πá‡∏ô invalid
    if (remainingMinutes <= 0) {
      const { error: statusUpdateError } = await supabase
        .from('starter_plan_users')
        .update({ ref_code_status: 'invalid' })
        .eq('id', data.id);

      if (statusUpdateError) {
        console.error('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ref_code_status ‡πÑ‡∏î‡πâ:', statusUpdateError.message);
      } else {
        console.log('üîí ref_code_status ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô invalid ‡πÅ‡∏•‡πâ‡∏ß');
      }
    }

    return res.status(200).json({
      success: true,
      message: 'Logout time and usage recorded',
      used_minutes: usedMinutes,
      remaining_minutes: remainingMinutes
    });

  } catch (err) {
    console.error('üí• Exception in logoutController:', err);
    return res.status(500).json({
      success: false,
      message: 'Unexpected server error'
    });
  }
}

module.exports = logoutController;
