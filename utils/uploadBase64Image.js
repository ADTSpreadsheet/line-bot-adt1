const { supabase } = require('./supabaseClient');

/**
 * ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å base64 string ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
 * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô handleFullPurchase
 * @param {Object} options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
 * @param {string} options.base64String - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö base64
 * @param {string} options.fileName - ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
 * @param {string} options.bucketName - ‡∏ä‡∏∑‡πà‡∏≠ bucket ‡πÉ‡∏ô Supabase Storage
 * @param {string} options.folderName - ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (optional)
 * @returns {Promise<{publicUrl: string, error: null, success: true} | {publicUrl: null, error: string, success: false}>}
 */
const uploadBase64Image = async ({ base64String, fileName, bucketName, folderName = '' }) => {
  try {
    console.log(`üì§ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: ${fileName} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á bucket: ${bucketName}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input
    if (!base64String || !fileName || !bucketName) {
      throw new Error('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ base64String, fileName, ‡πÅ‡∏•‡∏∞ bucketName');
    }

    // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô buffer
    let buffer;
    let contentType = 'image/jpeg'; // default
    
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö data URL prefix
      let base64Data = base64String;
      
      if (base64String.startsWith('data:')) {
        const matches = base64String.match(/^data:([a-zA-Z0-9]+\/[a-zA-Z0-9-.+]+).*,(.*)$/);
        if (matches && matches.length === 3) {
          contentType = matches[1]; // ‡πÄ‡∏ä‡πà‡∏ô image/jpeg, image/png
          base64Data = matches[2];
        } else {
          // fallback: ‡∏•‡∏ö prefix ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
          base64Data = base64String.replace(/^data:image\/[a-z]+;base64,/, '');
        }
      }
      
      buffer = Buffer.from(base64Data, 'base64');
      console.log(`‚úÖ ‡πÅ‡∏õ‡∏•‡∏á base64 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${buffer.length} bytes, type: ${contentType}`);
      
    } catch (error) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á base64 string ‡πÑ‡∏î‡πâ: ' + error.message);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (buffer.length > maxSize) {
      throw new Error(`‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ${(buffer.length / 1024 / 1024).toFixed(2)}MB (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 10MB)`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á file path
    const filePath = folderName ? `${folderName}/${fileName}` : fileName;
    console.log(`üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: ${filePath}`);

    // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á Supabase Storage
    const { data, error: uploadError } = await supabase.storage
      .from(bucketName)
      .upload(filePath, buffer, {
        contentType: contentType,
        cacheControl: '3600',
        upsert: true // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°
      });

    if (uploadError) {
      console.error('‚ùå Supabase upload error:', uploadError);
      throw new Error('‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + uploadError.message);
    }

    console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', data);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL
    const { data: urlData } = supabase.storage
      .from(bucketName)
      .getPublicUrl(filePath);

    if (!urlData?.publicUrl) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL ‡πÑ‡∏î‡πâ');
    }

    console.log(`üåê ‡∏™‡∏£‡πâ‡∏≤‡∏á public URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${urlData.publicUrl}`);

    return {
      success: true,  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° success flag ‡∏ï‡∏≤‡∏° pattern ‡πÄ‡∏î‡∏¥‡∏°
      publicUrl: urlData.publicUrl,
      error: null,
      filePath: filePath,
      fileSize: buffer.length,
      contentType: contentType
    };

  } catch (error) {
    console.error('‚ùå Upload error:', error.message);
    return {
      success: false,  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° success flag ‡∏ï‡∏≤‡∏° pattern ‡πÄ‡∏î‡∏¥‡∏°
      publicUrl: null,
      error: error.message,
      filePath: null,
      fileSize: 0,
      contentType: null
    };
  }
};

module.exports = uploadBase64Image;
