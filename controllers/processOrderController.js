const line = require('@line/bot-sdk');
const { supabase } = require('../utils/supabaseClient');
require('dotenv').config();

// LINE Bot 1 Client (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ User)
const client = new line.Client({
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN
});

const processOrder = async (req, res) => {
  try {
    const { ref_code, license_no, status } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!ref_code || !license_no || !status) {
      return res.status(400).json({ message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });
    }

    console.log(`üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å API2: ${status === 'Ap' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'} - ${ref_code}`);

    if (status === 'Ap') {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      await handleApprovalProcess(ref_code, license_no);
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò  
      await handleRejectionProcess(ref_code, license_no);
    }

    // ‚úÖ ‡∏ï‡∏≠‡∏ö 200 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ API2
    return res.status(200).json({ 
      message: `${status === 'Ap' ? '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' : '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'}‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      ref_code,
      license_no
    });

  } catch (error) {
    console.error('‚ùå ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
    return res.status(500).json({ error: error.message });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
const handleApprovalProcess = async (ref_code, license_no) => {
  try {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥: ${ref_code}, ${license_no}`);

    // Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô slip_submissions ‡πÄ‡∏õ‡πá‡∏ô 'Approved'
    const { error: updateSlipError } = await supabase
      .from('slip_submissions')
      .update({ submissions_status: 'Approved' })
      .eq('ref_code', ref_code)
      .eq('license_no', license_no);

    if (updateSlipError) throw updateSlipError;
    console.log('‚úÖ Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ slip_submissions ‡πÅ‡∏•‡πâ‡∏ß');

    // ‡∏î‡∏∂‡∏á serial_key ‡∏à‡∏≤‡∏Å auth_sessions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Logic 2
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id, serial_key')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô auth_sessions');
    }

    const { line_user_id, serial_key } = sessionData;

    // Logic 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username ‡πÅ‡∏•‡∏∞ password ‡πÉ‡∏ô license_holders
    const { error: updateLicenseError } = await supabase
      .from('license_holders')
      .update({
        username: license_no,  // username = license_no
        password: serial_key   // password = serial_key ‡∏à‡∏≤‡∏Å auth_sessions
      })
      .eq('license_no', license_no);

    if (updateLicenseError) throw updateLicenseError;
    console.log('‚úÖ Logic 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï username/password ‡πÉ‡∏ô license_holders ‡πÅ‡∏•‡πâ‡∏ß');

    // Logic 3: ‡∏™‡πà‡∏á Flex Message ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const flexMessage = {
      type: 'flex',
      altText: 'üéâ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ADTSpreadsheet',
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [{
            type: 'text',
            text: 'üéâ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
            weight: 'bold',
            size: 'lg',
            color: '#0099FF'
          }]
        },
        body: {
          type: 'box',
          layout: 'vertical',
          spacing: 'md',
          contents: [
            {
              type: 'text',
              text: '‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
              wrap: true,
              weight: 'bold',
              color: '#28a745'
            },
            {
              type: 'text',
              text: 'üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏Ñ‡∏∑‡∏≠',
              wrap: true,
              margin: 'md'
            },
            {
              type: 'text',
              text: `üÜî License no : ${license_no}`,
              weight: 'bold',
              size: 'sm',
              margin: 'sm'
            },
            {
              type: 'text',
              text: `üîñ Ref.Code : ${ref_code}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `üë§ Username : ${license_no}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: `üîë Password : ${serial_key}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: 'üíª ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ login ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö',
              wrap: true,
              margin: 'md',
              color: '#666666'
            }
          ]
        }
      }
    };

    await client.pushMessage(line_user_id, flexMessage);
    console.log(`‚úÖ Logic 3: ‡∏™‡πà‡∏á Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleApprovalProcess:', error);
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
const handleRejectionProcess = async (ref_code, license_no) => {
  try {
    console.log(`üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: ${ref_code}, ${license_no}`);

    // Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô slip_submissions ‡πÄ‡∏õ‡πá‡∏ô 'Rejected'
    const { error: updateSlipError } = await supabase
      .from('slip_submissions')
      .update({ submissions_status: 'Rejected' })
      .eq('ref_code', ref_code)
      .eq('license_no', license_no);

    if (updateSlipError) throw updateSlipError;
    console.log('‚úÖ Logic 1: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ slip_submissions ‡πÄ‡∏õ‡πá‡∏ô Rejected ‡πÅ‡∏•‡πâ‡∏ß');

    // ‡∏î‡∏∂‡∏á line_user_id ‡∏à‡∏≤‡∏Å auth_sessions
    const { data: sessionData, error: sessionError } = await supabase
      .from('auth_sessions')
      .select('line_user_id')
      .eq('ref_code', ref_code)
      .single();

    if (sessionError || !sessionData) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô auth_sessions');
    }

    const { line_user_id } = sessionData;

    // ‡∏™‡πà‡∏á Flex Message ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const flexMessage = {
      type: 'flex',
      altText: '‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ADTSpreadsheet',
      contents: {
        type: 'bubble',
        header: {
          type: 'box',
          layout: 'vertical',
          contents: [{
            type: 'text',
            text: 'üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠',
            weight: 'bold',
            size: 'lg',
            color: '#FF5551'
          }]
        },
        body: {
          type: 'box',
          layout: 'vertical',
          spacing: 'md',
          contents: [
            {
              type: 'text',
              text: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
              wrap: true,
              weight: 'bold',
              color: '#dc3545'
            },
            {
              type: 'text',
              text: `üÜî License no : ${license_no}`,
              weight: 'bold',
              size: 'sm',
              margin: 'md'
            },
            {
              type: 'text',
              text: `üîñ Ref.Code : ${ref_code}`,
              size: 'sm'
            },
            {
              type: 'text',
              text: 'üìû ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ Admin ‡∏ù‡πà‡∏≤‡∏¢‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ TumCivil',
              wrap: true,
              margin: 'md',
              weight: 'bold'
            },
            {
              type: 'text',
              text: '‚òéÔ∏è ‡πÇ‡∏ó‡∏£ : 089-499-0739',
              size: 'sm',
              weight: 'bold',
              color: '#0099FF'
            }
          ]
        }
      }
    };

    await client.pushMessage(line_user_id, flexMessage);
    console.log(`‚úÖ ‡∏™‡πà‡∏á Flex Message ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Üí line_user_id: ${line_user_id}`);

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô handleRejectionProcess:', error);
    throw error;
  }
};

module.exports = { processOrder };
