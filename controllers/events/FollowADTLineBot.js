const { supabase } = require('../../utils/supabaseClient');
const line = require('@line/bot-sdk');

const {
  getRandomWelcomeMessage,
  getRandomAnnoyedMessage
} = require('../../utils/randomMessageGenerator');

// LINE CONFIG
const config = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET
};

const client = new line.Client(config);

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code
function generateRefCode() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  const randLetter1 = letters.charAt(Math.floor(Math.random() * letters.length));
  const randLetter2 = letters.charAt(Math.floor(Math.random() * letters.length));
  const randDigit1 = digits.charAt(Math.floor(Math.random() * digits.length));
  const randDigit2 = digits.charAt(Math.floor(Math.random() * digits.length));
  const patterns = [
    randLetter1 + randLetter2 + randDigit1 + randDigit2,
    randDigit1 + randDigit2 + randLetter1 + randLetter2,
    randLetter1 + randDigit1 + randDigit2 + randLetter2,
    randDigit1 + randLetter1 + randDigit2 + randLetter2
  ];
  return patterns[Math.floor(Math.random() * patterns.length)];
}

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Serial Key
function generateSerialKey() {
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const digits = '0123456789';
  let numericPart = '';
  let letterPart = '';
  for (let i = 0; i < 4; i++) {
    numericPart += digits.charAt(Math.floor(Math.random() * digits.length));
  }
  for (let i = 0; i < 2; i++) {
    letterPart += letters.charAt(Math.floor(Math.random() * letters.length));
  }
  return numericPart + letterPart;
}

// üìå Logic 1: Follow Event Handler
const handleFollowEvent = async (event) => {
  const userId = event.source.userId;
  const timestamp = new Date().toISOString();

  // Step 1: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Supabase
  const { data, error } = await supabase
    .from('auth_sessions')
    .select('ref_code, expires_at, follow_count, status')
    .eq('line_user_id', userId)
    .maybeSingle();

  if (error) {
    console.error('‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ref.Code ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    return;
  }

  let followCount = (data?.follow_count || 0) + 1;
  await supabase
    .from('auth_sessions')
    .update({
      follow_count: followCount,
      line_status: 'Follow'
    })
    .eq('line_user_id', userId);

  // Step 2: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí BLOCK
  if (followCount >= 5) {
    await supabase
      .from('auth_sessions')
      .update({
        follow_count: followCount,
        verify_status: 'BLOCK',
        line_status: 'Follow'
      })
      .eq('line_user_id', userId);

    console.warn(`üö´ LINE USER ${userId} ‡∏ñ‡∏π‡∏Å BLOCK ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Follow ‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
    await client.pushMessage(userId, {
      type: 'text',
      text: `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ö‡∏•‡πá‡∏≠‡∏Å/‡∏õ‡∏•‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏£‡∏∞‡∏á‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö üòî`
    });
    return;
  }

  // Step 3: ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ Ref.Code ‡πÅ‡∏•‡πâ‡∏ß
  if (data && data.ref_code) {
    const now = new Date().toISOString();

    // Step 4: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Ref.Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (data.expires_at && data.expires_at <= now) {
      console.warn(`‚åõ Ref.Code ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß`);

      await supabase
        .from('auth_sessions')
        .update({ follow_count: followCount, line_status: 'Follow' })
        .eq('line_user_id', userId);

      await client.pushMessage(userId, {
        type: 'text',
        text: `üîí Ref.Code ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üôè`
      });

      return;
    }

    // ‡∏ñ‡πâ‡∏≤ Ref.Code ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô follow
    await supabase
      .from('auth_sessions')
      .update({ follow_count: followCount, line_status: 'Follow' })
      .eq('line_user_id', userId);

    console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ Ref.Code ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ${userId}`);

    await client.pushMessage(userId, {
      type: 'text',
      text: `${getRandomWelcomeMessage()}\n\nüîê Ref.Code ‡∏Ç‡∏≠‡∏á‡∏û‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠: ${data.ref_code}`
    });

    return;
  }

  // Step 5: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code + Serial Key
  const refCode = generateRefCode();
  const serialKey = generateSerialKey();

  const { error: insertError } = await supabase
    .from('auth_sessions')
    .insert({
      line_user_id: userId,
      ref_code: refCode,
      serial_key: serialKey,
      status: 'PENDING',
      created_at: timestamp,
      line_status: 'Follow',
      follow_count: followCount
    });

  if (insertError) {
    console.error('‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Ref.Code ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', insertError.message);
    return;
  }

  await supabase
    .from('registered_machines')
    .update({ line_status: 'Follow' })
    .eq('line_user_id', userId);

  // Step 6: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô ACTIVE ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ completed_at
  await supabase
    .from('auth_sessions')
    .update({
      status: 'ACTIVE',
      completed_at: new Date().toISOString()
    })
    .eq('ref_code', refCode);

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å "‡∏ô‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏™"
  await client.pushMessage(userId, {
    type: 'text',
    text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° ADTSpreadsheet\n‡∏Ç‡∏≠‡∏ö‡∏û‡∏£‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏™‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö`
  });

  console.log('‚úÖ Follow Event ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - Ref.Code:', refCode, 'Serial Key:', serialKey, 'Follow Count:', followCount);
};

module.exports = {
  handleFollowEvent
};
